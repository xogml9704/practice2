파이썬
 1991년에 귀도 반 로섬이 개발한 대화형 프로그래밍 언어

파이썬의 특징
 생산성이 뛰어나다.
 초보자한테 좋은 언어 - 인터프리터 언어

파이썬의 특징
 파이썬은 문법이 쉬워서 코드를 보면 직관적으로 알 수 있는 부분이 많다.
 파이썬은 다양한 플랫폼에서 사용
 라이브러리가 풍부
 애니메이션이나 그래픽을 쉽게 사용

파이썬의 라이브러리
 GUI(Tkinter), Web Framework(Django)

IDLE 실행
 IDLE 쉘창(Shell Window)
  파이썬의 기본 명령어 에디터(Editor)
  프로그래머가 명령어를 입력하면 대화식(interactive)으로 출력

프롬프트(Prompt)
 기호 '>>>'가 프롬프트임
 명령문과 엔터키를 입력하면 실행
 출력결과가 없는 명령문도 있음

데이터형
 데이터형(Data Type)
  자료형이라고도 함
  컴퓨터에서 다루어지는 다양한 데이터 값들의 유형을 의미
  정수형(3), 실수형(3.5), 문자열형

파이썬의 데이터형
 정수형(int)
 실수형(float)
 문자열형(str)
 부울(bool)

정수형
 정수를 이용하여 사칙연산을 실행
  정수 3과 정수 5를 덧셈 연산자를 사용하여 덧셈을 수행
  프롬프트 '>>>' 이후에 덧셈식 3 + 5를 입력하고 엔터키를 입력하면 명령문
  아래에 8이라는 값이 출력됨
  파이썬은 입력 후 출력 결과를 대화식으로 즉시 확인할 수 있음
  >>> 3 + 5
  8

문자열형(str)
 단어나 문장을 저장하기 위한 데이터형
 파이썬에서는 문자형(char)이 없음
 >>> 'hello'
 'hello'
 변수(variable) 데이터를 저장할 수 있는 메모리 공간의 이름
 데이터형(Data Type) 컴퓨터에서 다루어지는 다양한 데이터 값들의 유형

정수형 변수
 1. num이라는 정수형 변수가 메모리에 생성
 2. 정수형 변수 num에 3을 저장
 >>> num = 3
 >>> num
 3

실수형 변수
 >>> num = 3.5

파이썬의 문자열형 변수
 작은따옴표('')를 이용
 문자형과 문자열형을 같이 사용
 큰따옴표("")를 사용해도 됨
 >>> user = 'John'
 >>> user
 'John'

 >>> name = '홍길동'
 >>> name
 '홍길동'

부울형 변수
 부울 또는 불린
 boolean의 약어인 bool로 데이터형을 표시
 True 또는 False
 >>> exist = True
 >>> exist
 True

산술 연산자
 정수와 실수의 합이 특별한 형변환(Type Conversion)없이 수행됨
 >>> a = 3 # 정수형
 >>> b = 3.5 #실수형
 >>> a + b
 >>> 6.5

관계 연산자
 2개의 값이나 변수 간의 관계를 연산
 결과는 참(True) 또는 거짓(False)
  연산자 / 의미
  > / 크다
  < / 작다
  >= / 크거나 같다
  <= / 작거나 같다
  == / 같다
  != / 같지 않다

관계식
 "a는 0보다 크다"
 참이면 True를 그렇지 않으면 False를 출력
 연산자의 왼쪽을 주어로 해석
  a > 0
  의미 : a는 0보다 크다

실습
 a = 3
 b = 5
 a > b # a 는 b보다 크다
 False
 a < b # a는 b보다 작다
 True
 a >= b # a는 b보다 크거나 같다.
 False
 a <= b # a는 b보다 작거나 같다.
 True
 a == b # a는 b와 같다.
 False
 a != b # a는 b와 같지 않다.
 True

논리연산자
 2개의 값이나 변수 간에 논리적인 연산을 수행
 결과는 참(True) 또는 거짓(False)
  연산자 / 의미
  and / 그리고
  or / 또는
  not / 부정(아니다)
  
  논리식 (a > 0) and (a > b)
  의미 : a는 0보다 크고 a는 b보다 크다.

비트 연산자
 비트 단위로 연산을 수행
  & / 비트 단위 and
  | / 비트 단위 or
  * / 비트 단위 배타적 or (xor)
  ~ / 비트 단위 not
  << / 비트 단위 왼쪽 시프트
  >> / 비트 단위 오른쪽 시프트

비트 연산자의 논리
 1을 True로 0을 False로 생각
  a b a&b a|b a*b ~a
  1 1 1 1 0 0
  1 0 0 1 1 0
  0 1 0 1 1 1 
  0 0 0 0 0 1

출력함수
 print() 함수
  해당 객체를 출력장치(스크린) 또는
  문자 스트림 파일로 전송
   print('안녕하세요!')
   안녕하세요!

정수형, 실수형 부울형 데이터값 출력
 print(3) # 정수형
 3
 print(3.5) #실수형
 3.5
 print(True) # 부울형
 True
  함수의 입력값으로 수식을 지정할 수 있음
  해당 수식을 계산한 후 출력
 >>> print(3+5)
 8

변수에 저장된 내용 출력
 변수를 이용한 수식을 계산한 동시에 결과를 출력할 수 있음
 a = 3
 b = 3.5
 c = True
 print(a) # 정수형(int)
 print(b) # 실수형(float)
 print(c) # 부울형(bool)

 a = 3
 b = 3.5
 print(a+b)
 6.5

다수의 데이터형 출력
 다수의 값이나 변수에 저장된 값들을 출력하려면 각각의 내용들을 콤마(,)로 연결
 age = 21
 print('나이 : ', age)
 나이 : 21

 name = '홍길동'
 print('나는', name, '입니다.')
 나는 홍길동 입니다.

 변수에 저장된 값과 문자열들을 같이 출력할 수 있음
  a = 3
  b = 3.5
  print(a, '*', b, '=', a*b)
  3 * 3.5 = 10.5

C언어 유사 형태 출력 형식
 C언어에서 사용하는 printf() 함수의 유사한 방법
  '%' 이후에 출력하려는 값이나 변수를 사용
   print("%d" %3) # [C언어] printf("%d", 3); 명령문과 동일
   3
   printf("%f" %3.5)
   3.500000
   %s / 문자열(string)
   $c / 문자(character)
   $d / 정수(integer)
   %f / 부동소수(float)
   %o / 8진수
   %x / 16진수
   %% / '%'문자

입력 함수 - 문자열 데이터값 입력
 문자열 데이터값 입력
  input() 함수를 사용
  사용자는 문자열 입력 후 Enter를 눌러야 함
  사용자를 위한 지시사항을 출력해줄 필요가 있음
   name = input('이름 : ')
   이름 : 홍길동 # 이름 : 이라고 표시되면 그 옆에 자신의 이름을 입력
   print(name)
   홍길동 # name에 자신이 입력한 이름을 확인 가능

정수형 데이터값 입력
 정수형 데이터값 입력
  input() 함수로 입력받으면 숫자든 문자열이든 모두 문자열로 저장됨
  문자열을 정수 형태로 변환해서 계산하는 int() 함수를 이용
  age = input('나이 : ')
  나이 : 21
  after = input('몇 년 후 ?')
  몇 년 후 ? 10
  print(int(age) + int(after))
  31

실수형 데이터값 입력
 실수형 데이터값 입력
  input() 함수로 입력받으면 문자열로 저장됨
  문자열을 실수형으로 변환하기 위해서는 float() 함수를 사용
   height = input('키 : ')
   키 : 170.2
   print(float(height) + 1.5, 'cm')
   171.7 cm

부울형 데이터값 입력
 bool() 함수
  bool() 함수의 입력값으로 문자열형 값을 입력하면 무조건 참(True)이 됨
  입력값을 정수 형태로 변환한 후 부울형으로 다시 변환
  a = input('참(True)거짓(False) :')
  참(True)/거짓(False) : False
  print(bool(a))
  # 출력 결과?

  a = input('참(1)/거짓(0) :')
  참(1)/거짓(0) : 0
  a = int(a)
  print(bool(a))
  False

.py 파일
 파일에 저장
  한 개의 명령문이 다수의 줄로 구성
  명령어를 일괄적으로(batch) 입력하고 실행할 수 있음
  확장자명은 'py'
  파일명이 'hello'라면 'hello.py'파일이 생성

단일 if 문
 형식
  'if' 다음에 따라오는 조건식이 참이면 바로 아래에 있는 명령문(들)을 실행
  조건식 이후에 콜론(;)을 기입
  들여쓰기(indentation)를 정확히 해야 에러가 발생하지 않음.
  if (조건식):
    명렴문 1
    ( 명령문 2
    ... )

  grade = 82
  if (grade >= 80):
    print('합격입니다. \n')

프로그램 실행
 IDLE 에서 프로그램 실행
  입력한 내용을 저장 : 파일(File) 메뉴의 'Save'를 클릭
  실행 : 런(Run) 메뉴에서 'Run Module'을 실행
  쉘 창에 결과가 출력됨

단일 if-else 구문 형식
 if 문의 조건식이 참이면 바로 아래에 있는 명령문(들)을 실행
 거짓이면 else 이후의 명령어(들)을 실행
 else 다음에는 콜론(;)을 기입
 반드시 일정한 길이의 들여쓰기를 만들어 줄 것
 if (조건식) :
   명령문 a1
   ( 명령문 a2
      ...    )
 else:
   명령문 a1
   ( 명령문 a2
      ...    )

중첩 if문
 1개의 if문이 2개 이상의 조건식을 가지고 있는 if문
 'else if'를 줄인 'elif'를 사용
 들여쓰기를 정확히 하지 않으면 에러 발생
 num = -1
 if (num > 0):
   print('양수!')
 elif (num < 0):
   print('음수')
 else :
   print('0')
 결과 : 음수

for 문
 단일 for 문
  범위 또는 배열에 의해서 다음의 명령문(들)을 실행
   for 변수 in (범위 또는 배열):
     명령문 1
     ( 명령문 2
     ... )
  일반적으로 range() 함수를 사용하여 반복
   for i in range(3):
     print('안녕!')
   결과
    안녕!
    안녕!
    안녕!

range() 함수
 1개의 입력 인자를 사용
  for i in range(3):
    print(i)
  결과
   0
   1
   2
 2개의 입력 인자를 사용
  for i in range(2,5):
    print(i)
  결과
   2
   3
   4
 3개의 입력 인자를 사용
  range(시작값, 마지막값+1, 증가값)
   for i in range(0, 7, 2):
     print(i)
   결과
    0
    2
    4
    6
  range(시작값, 마지막값-1, 감소값)
   for i in range(6, -1, -2):
     print(i)
   결과
    6
    4
    2
    0

중첩 for 문
 for 문 내에 또 다른 for 문이 존재
  for i in range(3):
    for j in range(3):
      print('* ')
 결과
  *
  *
  *
  *
  *
  *
  *
  *
  *
 print() 함수의 end 옵션
  for i in range(3):
    for j in range(3):
      print('* ', end='')
  결과
   * * * * * * * * *

중첩 for 문
 구구단의 결과를 출력
  for i in range(1, 10):
    for j in range(1, 10):
      print(i*j, end=' ')
    print()

while문
 형식
  while (조건식):
    명령문 1
    ( 명령문 2
    ...  )

 조건식이 참이면 다음의 명령문을 실행
  i = 0
  while (i<3):
    print(i)
    i = i+1
  결과
  0
  1
  2
  